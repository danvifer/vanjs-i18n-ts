{
  "version": 3,
  "sources": ["../lib/I18n.ts"],
  "sourcesContent": ["import * as Van from \"vanjs-core\";\nconst van = Van.default;\n\n/**\n * A simple i18n class that uses vanjs to create a derived state that translates a key to a string using the current locale\n */\nexport class I18n {\n    _locale: Van.State<string>;\n    _currentTranslation: Van.State<Object | undefined>;\n\n    /**\n     * @param {Map<string, Object>} translations - Map of translations\n     * @param {string} defaultLocale - The default locale\n     */\n    constructor(translations: Map<string, Object>, defaultLocale: string) {\n        this._locale = van.state(defaultLocale);\n        this._currentTranslation = van.derive(() => translations.get(this._locale.val));\n    }\n\n    /**\n     * The current locale state\n     * @returns {Van.State<string>} - The current locale state\n     */\n    get locale(): Van.State<string> {\n        return this._locale;\n    }\n\n    /**\n     * Set the current locale\n     * @param {string} locale\n     */\n    setLocale(locale: string): void {\n        this._locale.val = locale;\n    }\n\n    /**\n     * Translate a key to a string using the current locale\n     *\n     * @private\n     * @param {Object} lang - The language object\n     * @param {string[]} splitKey - Parts of the key to translate\n     * @param {Object} params - The parameters to pass to the translation function\n     * @returns {string | null} - The translated string\n     */\n    private _translate(lang: any, splitKey: string[], params: Object | null = null): string | null {\n        let ns: any = lang;\n\n        for (const part of splitKey) {\n            ns = ns[part];\n            if (!ns) {\n                console.warn(`Translation key not found: ${splitKey.join('.')}`);\n                return null;\n            }\n        }\n\n        let result: string | null = null;\n        switch (typeof ns) {\n            case 'function':\n                result = ns(params);\n                break;\n            case 'string':\n                result = ns;\n                break;\n            default:\n                console.warn(`Unsupported translation type : ${typeof ns}`);\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * Create a derived state that translates a key to a string using the current locale\n     * @param {string} key - The key to translate\n     * @param {Object} params - The parameters to pass to the translation function\n     * @returns {Van.State<string>} - The state that contains the translated string\n     */\n    t(key: string, params: Object | null = null): Van.State<string> {\n        return van.derive(() => {\n            const lang = this._currentTranslation.val;\n            let result = key;\n            if (!!lang) {\n                result = this._translate(lang, key.split('.'), params) || key;\n            }\n            return result;\n        });\n    }\n}\n\nexport default I18n;"],
  "mappings": ";AAAA,YAAY,SAAS;AACrB,IAAM,MAAU;AAKT,IAAM,OAAN,MAAW;AAAA,EACd;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,cAAmC,eAAuB;AAClE,SAAK,UAAU,IAAI,MAAM,aAAa;AACtC,SAAK,sBAAsB,IAAI,OAAO,MAAM,aAAa,IAAI,KAAK,QAAQ,GAAG,CAAC;AAAA,EAClF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SAA4B;AAC5B,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,QAAsB;AAC5B,SAAK,QAAQ,MAAM;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWQ,WAAW,MAAW,UAAoB,SAAwB,MAAqB;AAC3F,QAAI,KAAU;AAEd,eAAW,QAAQ,UAAU;AACzB,WAAK,GAAG,IAAI;AACZ,UAAI,CAAC,IAAI;AACL,gBAAQ,KAAK,8BAA8B,SAAS,KAAK,GAAG,CAAC,EAAE;AAC/D,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,QAAI,SAAwB;AAC5B,YAAQ,OAAO,IAAI;AAAA,MACf,KAAK;AACD,iBAAS,GAAG,MAAM;AAClB;AAAA,MACJ,KAAK;AACD,iBAAS;AACT;AAAA,MACJ;AACI,gBAAQ,KAAK,kCAAkC,OAAO,EAAE,EAAE;AAC1D;AAAA,IACR;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,EAAE,KAAa,SAAwB,MAAyB;AAC5D,WAAO,IAAI,OAAO,MAAM;AACpB,YAAM,OAAO,KAAK,oBAAoB;AACtC,UAAI,SAAS;AACb,UAAI,CAAC,CAAC,MAAM;AACR,iBAAS,KAAK,WAAW,MAAM,IAAI,MAAM,GAAG,GAAG,MAAM,KAAK;AAAA,MAC9D;AACA,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AACJ;",
  "names": []
}
